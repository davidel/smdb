%!PS-Adobe-3.0
%%Creator: groff version 1.20.1
%%CreationDate: Thu Jun 10 19:45:49 2010
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.20 1
%%Pages: 20
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.20 1
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E/F1 10.95/Times-Bold@0
SF -.219(NA)72 84 S(ME).219 E F0(smdb_dbf_create, smdb_dbf_open, smdb_d\
bf_free, smdb_dbf_create_table, smdb_dbf_free_table,)108 96 Q
(smdb_dbf_sync, smdb_dbf_be)108 108 Q
(gin, smdb_dbf_end, smdb_dbf_rollback, smdb_dbf_get, smdb_dbf_get_ne)
-.15 E(xt,)-.15 E(smdb_dbf_\214rst, smdb_dbf_ne)108 120 Q
(xt, smdb_dbf_free_record, smdb_dbf_put, smdb_dbf_erase)-.15 E F1
(SYNOPSIS)72 148.8 Q/F2 10/Times-Bold@0 SF(#include <smdb-incl.h>)108
160.8 Q(int)108 184.8 Q/F3 10/Times-Italic@0 SF(smdb_dbf_cr)2.84 E(eate)
-.37 E F2(\(struct smdbxi_factory *).18 E F3(fac)1.97 E F2 2.5(,s).31 G
(truct smdbxi_\214le *)-2.5 E F3(b\214le).27 E F2
(,struct smdb_db_con\214g const *).18 E F3(dbcfg).35 E F2 2.5(,s).22 G
(truct smdb_db\214le_ctx **)-2.5 E F3(pdfctx)1.25 E F2(\);).53 E(int)108
196.8 Q F3(smdb_dbf_open)2.84 E F2(\(struct smdbxi_factory *).24 E F3
(fac)1.97 E F2 2.5(,s).31 G(truct smdbxi_\214le *)-2.5 E F3(b\214le).27
E F2 2.5(,s).18 G(truct smdb_db_con\214g const *)-2.5 E F3(dbcfg).35 E
F2 2.5(,s).22 G(truct smdb_db\214le_ctx **)-2.5 E F3(pdfctx)1.25 E F2
(\);).53 E -.1(vo)108 208.8 S(id).1 E F3(smdb_dbf_fr)2.84 E(ee)-.37 E F2
(\(struct smdb_db\214le_ctx *).18 E F3(dfctx).35 E F2(\);).53 E(int)108
220.8 Q F3(smdb_dbf_cr)2.84 E(eate_table)-.37 E F2
(\(struct smdb_db\214le_ctx *).18 E F3(dfctx).35 E F2 2.5(,u).53 G
(nsigned int)-2.5 E F3(tblid).13 E F2 2.5(,u).77 G(nsigned int)-2.5 E F3
(tblsize).13 E F2(\);).18 E(int)108 232.8 Q F3(smdb_dbf_fr)2.84 E
(ee_table)-.37 E F2(\(struct smdb_db\214le_ctx *).18 E F3(dfctx).35 E F2
2.5(,u).53 G(nsigned int)-2.5 E F3(tblid).13 E F2(\);).77 E(int)108
244.8 Q F3(smdb_dbf_sync)2.84 E F2(\(struct smdb_db\214le_ctx *).31 E F3
(dfctx).35 E F2(\);).53 E(int)108 256.8 Q F3(smdb_dbf_be)2.84 E(gin)-.4
E F2(\(struct smdb_db\214le_ctx *).24 E F3(dfctx).35 E F2(\);).53 E(int)
108 268.8 Q F3(smdb_dbf_end)2.84 E F2(\(struct smdb_db\214le_ctx *).77 E
F3(dfctx).35 E F2(\);).53 E(int)108 280.8 Q F3(smdb_dbf_r)2.84 E(ollbac)
-.45 E(k)-.2 E F2(\(struct smdb_db\214le_ctx *).67 E F3(dfctx).35 E F2
(\);).53 E(int)108 292.8 Q F3(smdb_dbf_g)2.84 E(et)-.1 E F2
(\(struct smdb_db\214le_ctx *).68 E F3(dfctx).35 E F2 2.5(,u).53 G
(nsigned int)-2.5 E F3(tblid).13 E F2 2.5(,s).77 G(truct smdb_db_ck)-2.5
E(ey const *)-.1 E F3 -.1(ke)C(y)-.2 E F2 2.5(,s).32 G(truct smdb_db_r)
-2.5 E(ecord *)-.18 E F3 -.37(re)C(c).37 E F2(,struct smdb_db_k).31 E
(enum *)-.1 E F3 -.1(ke)C(n).1 E F2(\);).24 E(int)108 304.8 Q F3
(smdb_dbf_g)2.84 E(et_ne)-.1 E(xt)-.2 E F2(\(struct smdb_db\214le_ctx *)
.68 E F3(dfctx).35 E F2 2.5(,s).53 G(truct smdb_db_ck)-2.5 E(ey const *)
-.1 E F3 -.1(ke)C(y)-.2 E F2 2.5(,s).32 G(truct smdb_db_r)-2.5 E
(ecord *)-.18 E F3 -.37(re)C(c).37 E F2 2.5(,s).31 G(truct smdb_db_k)
-2.5 E(enum *)-.1 E F3 -.1(ke)C(n).1 E F2(\);).24 E(int)108 316.8 Q F3
(smdb_dbf_\214r)2.84 E(st)-.1 E F2(\(struct smdb_db\214le_ctx *).68 E F3
(dfctx).35 E F2 2.5(,u).53 G(nsigned int)-2.5 E F3(tblid).13 E F2 2.5
(,s).77 G(truct smdb_db_r)-2.5 E(ecord *)-.18 E F3 -.37(re)C(c).37 E F2
2.5(,s).31 G(truct smdb_db_k)-2.5 E(enum *)-.1 E F3 -.1(ke)C(n).1 E F2
(\);).24 E(int)108 328.8 Q F3(smdb_dbf_ne)2.84 E(xt)-.2 E F2
(\(struct smdb_db\214le_ctx *).68 E F3(dfctx).35 E F2 2.5(,s).53 G
(truct smdb_db_r)-2.5 E(ecord *)-.18 E F3 -.37(re)C(c).37 E F2 2.5(,s)
.31 G(truct smdb_db_k)-2.5 E(enum *)-.1 E F3 -.1(ke)C(n).1 E F2(\);).24
E -.1(vo)108 340.8 S(id).1 E F3(smdb_dbf_fr)2.84 E(ee_r)-.37 E(ecor)-.37
E(d)-.37 E F2(\(struct smdb_db\214le_ctx *).77 E F3(dfctx).35 E F2 2.5
(,s).53 G(truct smdb_db_r)-2.5 E(ecord *)-.18 E F3 -.37(re)C(c).37 E F2
(\);).31 E(int)108 352.8 Q F3(smdb_dbf_put)2.84 E F2
(\(struct smdb_db\214le_ctx *).68 E F3(dfctx).35 E F2 2.5(,u).53 G
(nsigned int)-2.5 E F3(tblid).13 E F2 2.5(,s).77 G(truct smdb_db_ck)-2.5
E(ey const *)-.1 E F3 -.1(ke)C(y)-.2 E F2 2.5(,s).32 G
(truct smdb_db_cdata *)-2.5 E F3(data).35 E F2(\);).26 E(int)108 364.8 Q
F3(smdb_dbf_er)2.84 E(ase)-.15 E F2(\(struct smdb_db\214le_ctx *).18 E
F3(dfctx).35 E F2 2.5(,u).53 G(nsigned int)-2.5 E F3(tblid).13 E F2 2.5
(,s).77 G(truct smdb_db_ck)-2.5 E(ey const *)-.1 E F3 -.1(ke)C(y)-.2 E
F2 2.5(,s).32 G(truct smdb_db_cdata const *)-2.5 E F3(data).35 E F2(\);)
.26 E F1(DESCRIPTION)72 393.6 Q F0(The)108 405.6 Q F2(SMDB)2.5 E F0
(library e)2.5 E(xports a database API someho)-.15 E 2.5(ws)-.25 G
(imilar to the one supplied by the GNU GDBM)-2.5 E(library)108 417.6 Q
2.5(,w)-.65 G(ith a fe)-2.5 E 2.5(wd)-.25 G(if)-2.5 E 2.5(ferences. The)
-.25 F F2(SMDB)2.5 E F0
(database library is totally system independent, via the use of)2.5 E
-.15(ex)108 429.6 S(ternally supplied interf).15 E(ace pointers.)-.1 E
(The)5 E F2(SMDB)2.5 E F0(databse library does not try to implement an)
2.5 E 2.5<798c>-.15 G(le lock-)-2.5 E(ing, which is left to the caller)
108 441.6 Q 2.5(,i)-.4 G 2.5(ft)-2.5 G(he particular use requires it.)
-2.5 E(This allo)5 E(ws single instance users to not pay)-.25 E(the the\
 price \(in terms of performance and portability\) of the locking frame)
108 453.6 Q -.1(wo)-.25 G 2.5(rk. The).1 F F2(SMDB)2.5 E F0(database)2.5
E(library supports transactions, multiple tables inside the same DB \
\214le, and is less than half the size of)108 465.6 Q 2.5(GDBM. Finally)
108 477.6 R 2.5(,t)-.65 G(he)-2.5 E F2(SMDB)2.5 E F0
(database library is a)2.5 E -.25(va)-.2 G
(ilable under the loser LGPL license, instead of the GPL).25 E 2.5
(one. Conceptually)108 489.6 R(though, both allo)2.5 E
(ws for simple storage and retrie)-.25 E -.25(va)-.25 G 2.5(lo).25 G 2.5
(fK)-2.5 G(EY+D)-2.5 E -1.21 -1.11(AT A)-.4 H(couples, inside a ta-)3.61
E(ble.)108 501.6 Q F2(Structur)87 542.4 Q(es And Macr)-.18 E(os)-.18 E
F0(The)108 554.4 Q F2(SMDB)2.5 E F0(library uses e)2.5 E
(xternally supplied interf)-.15 E(aces for e)-.1 E -.15(ve)-.25 G
(ry task that is related with the host system).15 E
(interaction. This allo)108 566.4 Q
(ws for a totally portable implementation, that w)-.25 E
(as one of the major objecti)-.1 E -.15(ve)-.25 G 2.5(so).15 G 2.5(fi)
-2.5 G(ts)-2.5 E(de)108 578.4 Q -.15(ve)-.25 G(lopment. An interf).15 E
(ace is composed by an opaque data pointer)-.1 E F3(priv)3.75 E F0
(and a set of methods \(functions)2.82 E(pointers\) e)108 590.4 Q
(xported by the interf)-.15 E(ace. All the interf)-.1 E(aces e)-.1 E
(xports the tw)-.15 E 2.5(ob)-.1 G(asic methods)-2.5 E F3 -.1(ge)2.5 G
(t).1 E F0(and)3.18 E F3 -.37(re)2.5 G(lease).37 E F0 5(.T).18 G(he)-5 E
F3 -.1(ge)108 602.4 S(t).1 E F0(method acquires an interf)3.18 E
(ace and mak)-.1 E(es sure it remains v)-.1 E
(alid during the whole time it is used. Once an)-.25 E
(instance of an interf)108 614.4 Q(ace is no more used, the)-.1 E F3
-.37(re)2.5 G(lease).37 E F0(method should be called. T)2.68 E .2 -.1
(wo m)-.8 H(acros are a).1 E -.25(va)-.2 G(ilable for).25 E
(this purpose:)108 626.4 Q F2(SMDBXI_GET\()108 643.2 Q F3(iface).01 E F2
(\)).18 E F0(Get an instance of the interf)144 655.2 Q(ace pointed by)
-.1 E F3(iface)2.5 E F0(.).18 E F2(SMDBXI_RELEASE\()108 684 Q F3(iface)
.01 E F2(\)).18 E F0(Release an instance of the interf)144 696 Q
(ace pointed by)-.1 E F3(iface)2.5 E F0 5(.A).18 G 2.5(ne)-5 G
(xample implementation of the inter)-2.65 E(-)-.2 E -.1(fa)144 708 S
(ces required by).1 E F2(SMDB)2.5 E F0(is supplied ne)2.5 E
(xt in this document, and is also a)-.15 E -.25(va)-.2 G
(ilable inside the).25 E F2(SMDB)2.5 E F0(distrib)144 720 Q
(ution package.)-.2 E 203.59(GNU 0.4)72 768 R(1)222.75 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(All the memory management used by the)108 84 Q/F1 10/Times-Bold@0 SF
(SMDB)2.5 E F0(library is de\214ned by the)2.5 E F1(struct smdbxi_mem)
2.5 E F0(interf)2.5 E(ace:)-.1 E F1(struct smdbxi_mem)108 100.8 Q F0
(struct smdbxi_mem)144 124.8 Q({)144 136.8 Q -.2(vo)180 148.8 S(id *pri)
.2 E(v;)-.25 E(int \(*get\) \(v)180 160.8 Q(oid *pri)-.2 E(v\);)-.25 E
(int \(*release\) \(v)180 172.8 Q(oid *pri)-.2 E(v\);)-.25 E -.2(vo)180
184.8 S(id *\(*alloc\) \(v).2 E(oid *pri)-.2 E 1.3 -.65(v, i)-.25 H
(nt size\);).65 E -.2(vo)180 196.8 S(id \(*free\) \(v).2 E(oid *pri)-.2
E 1.3 -.65(v, v)-.25 H(oid *ptr\);).45 E(};)144 208.8 Q(The)144 232.8 Q
/F2 10/Times-Italic@0 SF(alloc)2.83 E F0(method allo)2.81 E
(ws the caller to allocate a block of memory)-.25 E 2.5(,w)-.65 G
(hereas the method)-2.5 E F2(fr)4.47 E(ee)-.37 E F0(allo)2.68 E(ws)-.25
E(the caller to free a block of memory returned by)144 244.8 Q F2(alloc)
2.5 E F0 5(.T).31 G(he follo)-5 E(wing macros are a)-.25 E -.25(va)-.2 G
(ilable to).25 E(access the)144 256.8 Q F1(struct smdbxi_mem)2.5 E F0
(methods:)2.5 E F1(SMDBXI_MM_ALLOC\()108 273.6 Q F2(iface).01 E F1(,).18
E F2(size)2.84 E F1(\)).18 E F0(Allocates a memory block of)144 285.6 Q
F2(size)2.84 E F0(bytes using the)2.68 E F2(iface)2.51 E F0
(memory interf)2.68 E(ace. The macro returns a)-.1 E(pointer to the ne)
144 297.6 Q(wly allocated memory block, or)-.25 E F1(NULL)2.5 E F0
(in case of f)2.5 E(ailure.)-.1 E F1(SMDBXI_MM_FREE\()108 314.4 Q F2
(iface).01 E F1(,).18 E F2(ptr)3.75 E F1(\)).73 E F0
(Frees a memory block pointed by)144 326.4 Q F2(ptr)3.75 E F0(using the)
3.23 E F2(iface)2.51 E F0(memory interf)2.68 E(ace. It is allo)-.1 E
(wed to call the)-.25 E F1(SMDBXI_MM_FREE)144 338.4 Q F0
(macro by passing)2.5 E F1(NULL)2.5 E F0(as)2.5 E F2(ptr)3.75 E F0
(parameter)3.23 E(.)-.55 E(The abstraction of a \214le is based on the)
108 355.2 Q F1(struct smdbxi_\214le)2.5 E F0(interf)2.5 E(ace:)-.1 E F1
(struct smdbxi_\214le)108 372 Q F0(struct smdbxi_\214le)144 396 Q({)144
408 Q -.2(vo)180 420 S(id *pri).2 E(v;)-.25 E(int \(*get\)\(v)180 432 Q
(oid *\);)-.2 E(int \(*release\)\(v)180 444 Q(oid *\);)-.2 E(smdb_of)180
456 Q(fset_t \(*seek\)\(v)-.25 E(oid *, smdb_of)-.2 E(fset_t, int\);)
-.25 E(int \(*read\)\(v)180 468 Q(oid *, v)-.2 E(oid *, int\);)-.2 E
(int \(*write\)\(v)180 480 Q(oid *, v)-.2 E(oid const *, int\);)-.2 E
(int \(*truncate\)\(v)180 492 Q(oid *, smdb_of)-.2 E(fset_t\);)-.25 E
(int \(*sync\)\(v)180 504 Q(oid *\);)-.2 E(char const *\(*path\)\(v)180
516 Q(oid *\);)-.2 E(};)144 528 Q(Besides from the common)144 552 Q F2
-.1(ge)2.5 G(t).1 E F0(and)3.18 E F2 -.37(re)2.5 G(lease).37 E F0
(methods, the)2.68 E F1(struct smdbxi_\214le)2.5 E F0(interf)2.5 E
(ace de\214nes func-)-.1 E(tions to access the \214le API.)144 564 Q
(Macros are a)5 E -.25(va)-.2 G(ilble to access the).25 E F1
(struct smdbxi_\214le)2.5 E F0(interf)2.5 E(ace:)-.1 E F1
(SMDBXI_FL_SEEK\()108 580.8 Q F2(iface).01 E F1(,).18 E F2(of)2.73 E
(fset)-.18 E F1(,).68 E F2(whence)2.84 E F1(\)).18 E F0
(Set the \214le position at)144 592.8 Q F2(of)2.73 E(fset)-.18 E F0
(bytes from the)3.18 E F2(whence)2.84 E F0(location. V)2.68 E
(alid constants for the)-1.11 E F2(whence)2.84 E F0(loca-)2.68 E
(tion are:)144 604.8 Q F1(SMDBXI_FL_SEEKSET)143 621.6 Q F0(The)179 633.6
Q F2(of)2.73 E(fset)-.18 E F0(is relati)3.18 E .3 -.15(ve t)-.25 H 2.5
(ot).15 G(he be)-2.5 E(ginning of the \214le.)-.15 E F1
(SMDBXI_FL_SEEKCUR)143 650.4 Q F0(The)179 662.4 Q F2(of)2.73 E(fset)-.18
E F0(is relati)3.18 E .3 -.15(ve t)-.25 H 2.5(ot).15 G
(he current \214le position.)-2.5 E F1(SMDBXI_FL_SEEKEND)143 679.2 Q F0
(The)179 691.2 Q F2(of)2.73 E(fset)-.18 E F0(is relati)3.18 E .3 -.15
(ve t)-.25 H 2.5(ot).15 G(he end of the \214le.)-2.5 E(The)143 715.2 Q
F1(SMDBXI_FL_SEEK)2.5 E F0
(returns the current \214le position from the be)2.5 E
(ginning of the \214le, or -1 in)-.15 E(case of error)143 727.2 Q(.)-.55
E 203.59(GNU 0.4)72 768 R(2)222.75 E 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E/F1 10/Times-Bold@0 SF
(SMDBXI_FL_READ\()108 84 Q/F2 10/Times-Italic@0 SF(iface).01 E F1(,).18
E F2 -.2(bu)2.5 G -.18(ff).2 G(er).18 E F1(,).73 E F2(size)2.84 E F1(\))
.18 E F0(Read)144 96 Q F2(size)2.84 E F0(bytes into the b)2.68 E(uf)-.2
E(fer pointer by)-.25 E F2 -.2(bu)2.5 G -.18(ff).2 G(er).18 E F0
(using the)3.23 E F2(iface)2.51 E F0(\214le interf)2.68 E
(ace. The function returns)-.1 E
(the number of bytes read, that can be lo)144 108 Q
(wer than the requested one in case of EOF)-.25 E 2.5(,o)-.8 G 2.5(r-)
-2.5 G 2.5(1i)-2.5 G 2.5(nc)-2.5 G(ase of)-2.5 E(error)144 120 Q(.)-.55
E F1(SMDBXI_FL_WRITE\()108 136.8 Q F2(iface).01 E F1(,).18 E F2 -.2(bu)
2.5 G -.18(ff).2 G(er).18 E F1(,).73 E F2(size)2.84 E F1(\)).18 E F0
(Write)144 148.8 Q F2(size)2.84 E F0(bytes from the b)2.68 E(uf)-.2 E
(fer pointer by)-.25 E F2 -.2(bu)2.5 G -.18(ff).2 G(er).18 E F0
(using the)3.23 E F2(iface)2.51 E F0(\214le interf)2.68 E
(ace. The function)-.1 E
(returns the number of bytes written, or -1 in case of error)144 160.8 Q
(.)-.55 E F1(SMDBXI_FL_TR)108 177.6 Q(UNCA)-.3 E(TE\()-.95 E F2(iface)
.01 E F1(,).18 E F2(length)2.59 E F1(\)).28 E F0 -.35(Tr)144 189.6 S
(uncate the \214le identi\214ed by the).35 E F2(iface)2.51 E F0(interf)
2.68 E(ace to)-.1 E F2(length)2.59 E F0(bytes. The ne)2.78 E 2.5(wl)-.25
G(ength can be lo)-2.5 E(wer of)-.25 E
(higher than the current \214le size.)144 201.6 Q
(The function returns 0 if succeeded, or -1 in case of error)5 E(.)-.55
E F1(SMDBXI_FL_SYNC\()108 218.4 Q F2(iface).01 E F1(\)).18 E F0
(Sync the b)144 230.4 Q(uf)-.2 E
(fers content of the \214le identi\214ed by the)-.25 E F2(iface)2.51 E
F0(interf)2.68 E(ace to the underlying storage)-.1 E 2.5(media. The)144
242.4 R(function returns 0 if succeeded, or -1 in case of error)2.5 E(.)
-.55 E F1(SMDBXI_FL_P)108 259.2 Q -.95(AT)-.74 G(H\().95 E F2(iface).01
E F1(\)).18 E F0(Returns the path of the \214le identi\214ed by the)144
271.2 Q F2(iface)2.51 E F0(interf)2.68 E(ace.)-.1 E(The)108 300 Q F1
(struct smdbxi_fs)2.5 E F0(interf)2.5 E(ace pro)-.1 E
(vide access to some basic \214le system operations.)-.15 E F1
(struct smdbxi_fs)108 316.8 Q F0(struct smdbxi_fs {)144 340.8 Q -.2(vo)
180 352.8 S(id *pri).2 E(v;)-.25 E(int \(*get\)\(v)180 364.8 Q(oid *\);)
-.2 E(int \(*release\)\(v)180 376.8 Q(oid *\);)-.2 E
(struct smdbxi_\214le *\(*open\)\(v)180 388.8 Q
(oid *, char const *, int\);)-.2 E(int \(*remo)180 400.8 Q -.15(ve)-.15
G(\)\(v).15 E(oid *, char const *\);)-.2 E(int \(*rename\)\(v)180 412.8
Q(oid *, char const *, char const *\);)-.2 E(int \(*mkdir\)\(v)180 424.8
Q(oid *, char const *\);)-.2 E(int \(*rmdir\)\(v)180 436.8 Q
(oid *, char const *\);)-.2 E(};)144 448.8 Q(The follo)144 472.8 Q
(wing macros are a)-.25 E -.25(va)-.2 G(ilble to access the).25 E F1
(struct smdbxi_\214le)2.5 E F0(interf)2.5 E(ace \(on top of the usual)
-.1 E(get/release\):)144 484.8 Q F1(SMDBXI_FS_OPEN\()108 501.6 Q F2
(iface).01 E F1(,).18 E F2(path)3.75 E F1(,).28 E F2(mode)2.88 E F1(\))
.18 E F0(Opens the \214le speci\214ed in)144 513.6 Q F2(path)3.75 E F0
(using the)2.78 E F2(mode)2.88 E F0(parameter to request dif)2.68 E
(frent type of access.)-.25 E -1.11(Va)5 G(lid)1.11 E -.25(va)144 525.6
S(lues for the).25 E F2(mode)2.88 E F0(parameter are:)2.68 E F1
(SMDBXI_FL_R)143 542.4 Q(OPEN)-.3 E F0(Opens an e)179 554.4 Q
(xisting \214le in read-only mode.)-.15 E F1(SMDBXI_FL_R)143 571.2 Q -.1
(WO)-.35 G(PEN).1 E F0(Opens an e)179 583.2 Q
(xisting \214le in read-write mode.)-.15 E F1(SMDBXI_FL_CREA)143 600 Q
(TE)-.95 E F0 -.35(Tr)179 612 S(ies to open an e).35 E(xisting \214le i\
n read-write mode, and creates it if the \214le speci\214ed by)-.15 E F2
(path)3.75 E F0(does not e)179 624 Q(xist.)-.15 E F1(SMDBXI_FL_CREA)143
640.8 Q(TENEW)-.95 E F0 -.35(Tr)179 652.8 S(ies to open an e).35 E
(xisting \214le in read-write mode and truncates it if e)-.15 E 2.5
(xists. If)-.15 F(the \214le speci-)2.5 E(\214ed by)179 664.8 Q F2(path)
3.75 E F0(does not e)2.78 E
(xist, the underlying callback function creates it.)-.15 E(The)143 688.8
Q F1(SMDBXI_FL_OPEN)2.5 E F0(returns the ne)2.5 E 2.5<778c>-.25 G
(le interf)-2.5 E(ace that can be used to manipulate the ne)-.1 E(wly)
-.25 E(open \214le, or)143 700.8 Q F1(NULL)2.5 E F0(in case of error)2.5
E(.)-.55 E 203.59(GNU 0.4)72 768 R(3)222.75 E 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E/F1 10/Times-Bold@0 SF
(SMDBXI_FS_REMO)108 84 Q(VE\()-.5 E/F2 10/Times-Italic@0 SF(iface).01 E
F1(,).18 E F2(path)3.75 E F1(\)).28 E F0(Remo)144 96 Q -.15(ve)-.15 G
2.5(st).15 G(he \214le speci\214ed by the)-2.5 E F2(path)3.75 E F0
(parameter)2.78 E 5(.R)-.55 G
(eturns 0 in case of success, or -1 in case of)-5 E(error)144 108 Q(.)
-.55 E F1(SMDBXI_FS_REN)108 124.8 Q(AME\()-.2 E F2(iface).01 E F1(,).18
E F2(opath)2.73 E F1(,).28 E F2(npath)2.86 E F1(\)).28 E F0
(Renames the \214le/directory speci\214ed by the)144 136.8 Q F2(opath)
2.73 E F0(parameter)2.78 E 2.5(,i)-.4 G(nto the path speci\214ed in the)
-2.5 E F2(npath)2.86 E F0(parameter)144 148.8 Q 5(.R)-.55 G
(eturns 0 in case of success, or -1 in case of error)-5 E(.)-.55 E F1
(SMDBXI_FS_MKDIR\()108 165.6 Q F2(iface).01 E F1(,).18 E F2(path)3.75 E
F1(\)).28 E F0(Creates the directory speci\214ed by the)144 177.6 Q F2
(path)3.75 E F0(parameter)2.78 E 5(.R)-.55 G
(eturns 0 in case of success, or -1 in case)-5 E(of error)144 189.6 Q(.)
-.55 E F1(SMDBXI_FS_RMDIR\()108 206.4 Q F2(iface).01 E F1(,).18 E F2
(path)3.75 E F1(\)).28 E F0(Remo)144 218.4 Q -.15(ve)-.15 G 2.5(st).15 G
(he directory speci\214ed by the)-2.5 E F2(path)3.75 E F0(parameter)2.78
E 5(.R)-.55 G(eturns 0 in case of success, or -1 in case)-5 E(of error)
144 230.4 Q(.)-.55 E(The)108 259.2 Q F1(struct smdbxi_factory)2.5 E F0
(interf)2.5 E(ace is the f)-.1 E(actory of all the other interf)-.1 E
(aces:)-.1 E F1(struct smdbxi_factory)108 276 Q F0(struct smdbxi_f)144
300 Q(actory {)-.1 E -.2(vo)180 312 S(id *pri).2 E(v;)-.25 E
(int \(*get\)\(v)180 324 Q(oid *\);)-.2 E(int \(*release\)\(v)180 336 Q
(oid *\);)-.2 E(struct smdbxi_mem *\(*mem\)\(v)180 348 Q(oid *\);)-.2 E
(struct smdbxi_\214le *\(*\214le\)\(v)180 360 Q(oid *\);)-.2 E
(struct smdbxi_fs *\(*fs\)\(v)180 372 Q(oid *\);)-.2 E(};)144 384 Q
(Besides from the usual)144 408 Q F2 -.1(ge)2.5 G(t).1 E F0(and)3.18 E
F2 -.37(re)2.5 G(lease).37 E F0(methods, other function are a)2.68 E
-.25(va)-.2 G(ilable to instantiate other).25 E(interf)144 420 Q 2.5
(aces. The)-.1 F F2(mem)2.88 E F0(method allo)2.82 E
(ws the creation of a memory interf)-.25 E(ace, whereas the)-.1 E F2
(\214le)4.41 E F0(method)2.68 E(creates a \214le interf)144 432 Q
(ace. Macros are de\214ned to access the)-.1 E F1(struct smdbxi_factory)
2.5 E F0(functions:)2.5 E F1(SMDBXI_FC_MEM\()108 448.8 Q F2(iface).01 E
F1(\)).18 E F0(Returns a pointer to a memory interf)144 460.8 Q(ace \()
-.1 E F1(struct smdbxi_mem)2.5 E F0(\), or)2.5 E F1(NULL)2.5 E F0
(in case of error)2.5 E(.)-.55 E F1(SMDBXI_FC_FILE\()108 477.6 Q F2
(iface).01 E F1(\)).18 E F0(Returns a pointer to a \214le interf)144
489.6 Q(ace \()-.1 E F1(struct smdbxi_\214le)2.5 E F0(\), or)2.5 E F1
(NULL)2.5 E F0(in case of error)2.5 E 5(.T)-.55 G(he \214le will)-5 E
(be a temporary empty \214le, which will be remo)144 501.6 Q -.15(ve)
-.15 G 2.5(do).15 G(nce closed.)-2.5 E F1(SMDBXI_FC_FS\()108 518.4 Q F2
(iface).01 E F1(\)).18 E F0(Returns a pointer to a \214le system interf)
144 530.4 Q(ace \()-.1 E F1(struct smdbxi_fs)2.5 E F0(\), or)2.5 E F1
(NULL)2.5 E F0(in case of error)2.5 E(.)-.55 E F1(Functions)87 547.2 Q
(int)108 559.2 Q F2(smdb_dbf_cr)2.84 E(eate)-.37 E F1
(\(struct smdbxi_factory *).18 E F2(fac)1.97 E F1 2.5(,s).31 G
(truct smdbxi_\214le *)-2.5 E F2(b\214le).27 E F1
(,struct smdb_db_con\214g).18 E(const *)108 571.2 Q F2(dbcfg).35 E F1
2.5(,s).22 G(truct smdb_db\214le_ctx **)-2.5 E F2(pdfctx)1.25 E F1(\);)
.53 E F0(Creates a ne)144 595.2 Q 2.5(wd)-.25 G
(atabase \214le, using the \214le interf)-2.5 E(ace supplied in)-.1 E F2
(b\214le)2.77 E F0(as storage.)2.68 E(The)5 E F2(fac)4.47 E F0
(parameter)2.81 E(represent the interf)144 607.2 Q(ace f)-.1 E(actory)
-.1 E 2.5(,w)-.65 G(hile the parameter)-2.5 E F2(dbcfg)2.85 E F0
(is used to con\214gure the database cre-)2.72 E 2.5(ation. The)144
619.2 R F2(dbcfg)2.85 E F0(is a pointer to the follo)2.72 E
(wing structure:)-.25 E(struct smdb_db_con\214g {)144 643.2 Q
(smdb_u32 blk_size;)180 655.2 Q(smdb_u32 blk_count;)180 667.2 Q
(smdb_u32 cache_size;)180 679.2 Q(smdb_u32 num_tables;)180 691.2 Q(};)
144 703.2 Q(The)144 727.2 Q F1(blk_size)2.5 E F0(member is the requeste\
d block size, which cannot be smaller than 256 bytes.)2.5 E(The)5 E
203.59(GNU 0.4)72 768 R(4)222.75 E 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E/F1 10/Times-Bold@0 SF
(blk_count)144 84 Q F0(is the initial allocation for the database.)2.5 E
(The database \214le will automatically gro)5 E 1.3 -.65(w, b)-.25 H(ut)
.45 E(if you kno)144 96 Q 2.5(wb)-.25 G
(eforehand what you estimated \214nal size will be, guessing the)-2.5 E
F1(blk_count)2.5 E F0(parameter)2.5 E
(can reduce the number of database \214le gro)144 108 Q 2.5(wo)-.25 G
2.5(perations. The)-2.5 F F1(cache_size)2.5 E F0(is the amount of RAM)
2.5 E(\(in bytes\) to be used for caching the database \214le blocks.)
144 120 Q(It will be rounded to the ne)5 E(xt block size.)-.15 E(The)144
132 Q F1(num_tables)2.5 E F0(parameter sets the allocation for the maxi\
mum number of tables which will be)2.5 E
(possible to create inside the database.)144 144 Q(If the)5 E/F2 10
/Times-Italic@0 SF(dbcfg)2.85 E F0(parameter is)2.72 E F1(NULL)2.5 E F0
2.5(,d)C(ef)-2.5 E(ault v)-.1 E(alues will be cho-)-.25 E 2.5(sen. The)
144 156 R F2(pdfctx)3.75 E F0(parameter is a pointer to the database ac\
cessory structure returned in case of suc-)3.03 E 2.5(cess. The)144 168
R(function returns 0 in case of success, and -1 in case of error)2.5 E
(.)-.55 E F1(int)108 196.8 Q F2(smdb_dbf_open)2.84 E F1
(\(struct smdbxi_factory *).24 E F2(fac)1.97 E F1 2.5(,s).31 G
(truct smdbxi_\214le *)-2.5 E F2(b\214le).27 E F1 2.5(,s).18 G
(truct smdb_db_con\214g const)-2.5 E(*)108 208.8 Q F2(dbcfg).35 E F1 2.5
(,s).22 G(truct smdb_db\214le_ctx **)-2.5 E F2(pdfctx)1.25 E F1(\);).53
E F0(Opens an e)144 232.8 Q
(xisting database \214le, using the \214le interf)-.15 E
(ace supplied in)-.1 E F2(b\214le)2.77 E F0(as storage.)2.68 E(The)5 E
F2(fac)4.47 E F0(parameter represent the interf)144 244.8 Q(ace f)-.1 E
(actory)-.1 E 2.5(,w)-.65 G(hile the parameter)-2.5 E F2(dbcfg)2.85 E F0
(is used to con\214gure the data-)2.72 E(base internals.)144 256.8 Q
(The only parameter used during the open operation, is the)5 E F1
(cache_size)2.5 E F0 2.5(one. The)2.5 F F2(pdfctx)145.25 268.8 Q F0(par\
ameter is a pointer to the database accessory structure returned in cas\
e of success.)3.03 E(The)5 E
(function returns 0 in case of success, and -1 in case of error)144
280.8 Q(.)-.55 E F1 -.1(vo)108 309.6 S(id).1 E F2(smdb_dbf_fr)2.84 E(ee)
-.37 E F1(\(struct smdb_db\214le_ctx *).18 E F2(dfctx).35 E F1(\);).53 E
F0(Frees the database object pointed by the)144 333.6 Q F2(dfctx)2.85 E
F0(parameter)3.03 E 2.5(,a)-.4 G
(nd releases all the associated resources.)-2.5 E F1(int)108 362.4 Q F2
(smdb_dbf_cr)2.84 E(eate_table)-.37 E F1(\(struct smdb_db\214le_ctx *)
.18 E F2(dfctx).35 E F1 2.5(,u).53 G(nsigned int)-2.5 E F2(tblid).13 E
F1 2.5(,u).77 G(nsigned int)-2.5 E F2(tblsize).13 E F1(\);).18 E F0
(Creates a table with ID)144 386.4 Q F2(tblid)2.63 E F0
(inside the database pointed by)3.27 E F2(dfctx)2.5 E F0 2.5(,w).53 G
(ith an initial hash allocation)-2.5 E(close to the v)144 398.4 Q
(alue speci\214ed in the)-.25 E F2(tblsize)2.63 E F0(parameter)2.68 E 5
(.T)-.55 G(he)-5 E F2(tblid)2.63 E F0 -.25(va)3.27 G(lue must be lo).25
E(wer than the num-)-.25 E(ber of tables allocated inside the database \
\214le during its creation.)144 410.4 Q
(The function returns 0 in case of)5 E(success, and -1 in case of error)
144 422.4 Q(.)-.55 E F1(int)108 451.2 Q F2(smdb_dbf_fr)2.84 E(ee_table)
-.37 E F1(\(struct smdb_db\214le_ctx *).18 E F2(dfctx).35 E F1 2.5(,u)
.53 G(nsigned int)-2.5 E F2(tblid).13 E F1(\);).77 E F0
(Frees the table speci\214ed by the)144 475.2 Q F2(tblid)2.63 E F0
(parameter)3.27 E 2.5(,i)-.4 G(nside the database pointed by)-2.5 E F2
(dfctx)2.5 E F0 5(.A).53 G(ll the allo-)-5 E
(cation related to the speci\214ed table will be released.)144 487.2 Q
(The function returns 0 in case of success, and)5 E(-1 in case of error)
144 499.2 Q(.)-.55 E F1(int)108 528 Q F2(smdb_dbf_sync)2.84 E F1
(\(struct smdb_db\214le_ctx *).31 E F2(dfctx).35 E F1(\);).53 E F0
(Syncs the database b)144 552 Q(uf)-.2 E
(fer cache onto the storage media.)-.25 E(The)5 E F2(dfctx)2.85 E F0
(represent the database to be)3.03 E 2.5(sync. If)144 564 R
(transactions are used, the)2.5 E F2(smdb_dbf_sync)2.5 E F0
(\(\) function simply causes the dirty b).31 E(uf)-.2 E(fer cache)-.25 E
(blocks to be written onto the log.)144 576 Q
(The function returns 0 in case of success, and -1 in case of error)5 E
(.)-.55 E F1(int)108 604.8 Q F2(smdb_dbf_be)2.84 E(gin)-.4 E F1
(\(struct smdb_db\214le_ctx *).24 E F2(dfctx).35 E F1(\);).53 E F0
(Starts a transation for the database pointed by the)144 628.8 Q F2
(dfctx)2.85 E F0(parameter)3.03 E 5(.T)-.55 G(ransactions must not be)
-5.35 E(nested, and must be al)144 640.8 Q -.1(wa)-.1 G
(ys terminated by either a call to).1 E F2(smdb_dbf_end)2.5 E F0
(\(\) or).77 E F2(smdb_dbf_r)2.5 E(ollbac)-.45 E(k)-.2 E F0(\(\).).67 E
(The function returns 0 in case of success, and -1 in case of error)144
652.8 Q(.)-.55 E F1(int)108 681.6 Q F2(smdb_dbf_end)2.84 E F1
(\(struct smdb_db\214le_ctx *).77 E F2(dfctx).35 E F1(\);).53 E F0
(Ends a transaction pre)144 705.6 Q(viously opened by a call to the)-.25
E F2(smdb_dbf_be)2.5 E(gin)-.4 E F0(\(\) function.).24 E
(After a success-)5 E(ful return from)144 717.6 Q F2(smdb_dbf_end)2.5 E
F0
(\(\), the database operations performed inside the transaction are per)
.77 E(-)-.2 E(manently visible inside the database pointed by)144 729.6
Q F2(dfctx)2.5 E F0 5(.T).53 G
(he function returns 0 in case of success,)-5 E 203.59(GNU 0.4)72 768 R
(5)222.75 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(and -1 in case of error)144 84 Q(.)-.55 E/F1 10/Times-Bold@0 SF(int)108
112.8 Q/F2 10/Times-Italic@0 SF(smdb_dbf_r)2.84 E(ollbac)-.45 E(k)-.2 E
F1(\(struct smdb_db\214le_ctx *).67 E F2(dfctx).35 E F1(\);).53 E F0
(Rollbacks the operations done after a pre)144 136.8 Q(vious call to)
-.25 E F2(smdb_dbf_be)2.5 E(gin)-.4 E F0(\(\) for the database pointed)
.24 E(by)144 148.8 Q F2(dfctx)2.5 E F0 5(.T).53 G
(he function returns 0 in case of success, and -1 in case of error)-5 E
(.)-.55 E F1(int)108 177.6 Q F2(smdb_dbf_g)2.84 E(et)-.1 E F1
(\(struct smdb_db\214le_ctx *).68 E F2(dfctx).35 E F1 2.5(,u).53 G
(nsigned int)-2.5 E F2(tblid).13 E F1 2.5(,s).77 G(truct smdb_db_ck)-2.5
E(ey const *)-.1 E F2 -.1(ke)C(y)-.2 E F1(,).32 E(struct smdb_db_r)108
189.6 Q(ecord *)-.18 E F2 -.37(re)C(c).37 E F1(,struct smdb_db_k).31 E
(enum *)-.1 E F2 -.1(ke)C(n).1 E F1(\);).24 E F0
(Looks up, inside the database pointed by)144 213.6 Q F2(dfctx)2.85 E F0
(and table)3.03 E F2(tblid)2.5 E F0 2.5(,t).77 G(he k)-2.5 E .3 -.15
(ey s)-.1 H(peci\214ed by).15 E F2 -.1(ke)2.5 G(y)-.2 E F0 5(.T).32 G
(he)-5 E F2(smdb_dbf_g)144 225.6 Q(et)-.1 E F0
(\(\) function returns \(if an).68 E 2.5(yf)-.15 G
(ound\) the \214rst record matching the passed)-2.5 E F2 -.1(ke)2.5 G(y)
-.2 E F0(parameter)2.82 E(.)-.55 E
(The caller can continue the enumeration of the records matching the gi)
144 237.6 Q -.15(ve)-.25 G(n).15 E F2 -.1(ke)2.5 G(y)-.2 E F0(using the)
2.82 E F2(smdb_dbf_g)144 249.6 Q(et_ne)-.1 E(xt)-.2 E F0(\(\) function.)
.68 E(The record is stored into the structure pointed by the)5 E F2 -.37
(re)2.5 G(c).37 E F0(parame-)2.81 E(ter)144 261.6 Q 2.5(,w)-.4 G
(hile the enumeration conte)-2.5 E(xt is stored inside the)-.15 E F2 -.1
(ke)2.5 G(n).1 E F0(parameter \(which should be considered)2.74 E 2.5
(ao)144 273.6 S(paque structure by the caller\).)-2.5 E
(The caller must use the)5 E F2(smdb_dbf_fr)2.5 E(ee_r)-.37 E(ecor)-.37
E(d)-.37 E F0(\(\) function to free).77 E
(the resources allocated in the)144 285.6 Q F2 -.37(re)2.5 G(c).37 E F0
(structure, if a positi)2.81 E .3 -.15(ve l)-.25 H(ookup happen.).15 E
(The function returns a)5 E(number greater than 0 in case of positi)144
297.6 Q .3 -.15(ve l)-.25 H
(ookup, 0 in case of missing lookup, and -1 in case of).15 E(error)144
309.6 Q(.)-.55 E F1(int)108 338.4 Q F2(smdb_dbf_g)2.84 E(et_ne)-.1 E(xt)
-.2 E F1(\(struct smdb_db\214le_ctx *).68 E F2(dfctx).35 E F1 2.5(,s).53
G(truct smdb_db_ck)-2.5 E(ey const *)-.1 E F2 -.1(ke)C(y)-.2 E F1 2.5
(,s).32 G(truct)-2.5 E(smdb_db_r)108 350.4 Q(ecord *)-.18 E F2 -.37(re)C
(c).37 E F1 2.5(,s).31 G(truct smdb_db_k)-2.5 E(enum *)-.1 E F2 -.1(ke)C
(n).1 E F1(\);).24 E F0
(Continue the enumeration initiated with the function)144 374.4 Q F2
(smdb_dbf_g)2.5 E(et)-.1 E F0(\(\), matching, inside the).68 E F2(dfctx)
2.85 E F0(database, the ne)144 386.4 Q(xt record with)-.15 E F2 -.1(ke)
2.5 G(y)-.2 E F0 -.25(va)2.82 G 2.5(lue. The).25 F(caller must use the)
2.5 E F2(smdb_dbf_fr)2.5 E(ee_r)-.37 E(ecor)-.37 E(d)-.37 E F0
(\(\) function).77 E(to free the resources allocated in the)144 398.4 Q
F2 -.37(re)2.5 G(c).37 E F0(structure, if a positi)2.81 E .3 -.15(ve l)
-.25 H(ookup happen.).15 E(The function)5 E
(returns a number greater than 0 in case of positi)144 410.4 Q .3 -.15
(ve l)-.25 H(ookup, 0 in case of missing lookup, and -1 in).15 E
(case of error)144 422.4 Q(.)-.55 E F1(int)108 451.2 Q F2
(smdb_dbf_\214r)2.84 E(st)-.1 E F1(\(struct smdb_db\214le_ctx *).68 E F2
(dfctx).35 E F1 2.5(,u).53 G(nsigned int)-2.5 E F2(tblid).13 E F1 2.5
(,s).77 G(truct smdb_db_r)-2.5 E(ecord *)-.18 E F2 -.37(re)C(c).37 E F1
(,).31 E(struct smdb_db_k)108 463.2 Q(enum *)-.1 E F2 -.1(ke)C(n).1 E F1
(\);).24 E F0(Starts an enumeration of all records inside the)144 487.2
Q F2(dfctx)2.5 E F0 2.5(,t).53 G(able)-2.5 E F2(tblid)2.5 E F0 5(.T).77
G(he record data is stored in the)-5 E(supplied)144 499.2 Q F2 -.37(re)
2.5 G(c).37 E F0(parameter)2.81 E 2.5(,w)-.4 G(hile the)-2.5 E F2 -.1
(ke)2.5 G(n).1 E F0(parameter is used to store the)2.74 E F1(SMDB)2.5 E
F0(pri)2.5 E -.25(va)-.25 G(te enumeration).25 E(conte)144 511.2 Q 2.5
(xt. The)-.15 F
(function returns a number greater than 0 in case of positi)2.5 E .3
-.15(ve l)-.25 H(ookup, 0 in case of miss-).15 E
(ing lookup, and -1 in case of error)144 523.2 Q(.)-.55 E F1(int)108 552
Q F2(smdb_dbf_ne)2.84 E(xt)-.2 E F1(\(struct smdb_db\214le_ctx *).68 E
F2(dfctx).35 E F1 2.5(,s).53 G(truct smdb_db_r)-2.5 E(ecord *)-.18 E F2
-.37(re)C(c).37 E F1 2.5(,s).31 G(truct)-2.5 E(smdb_db_k)108 564 Q
(enum *)-.1 E F2 -.1(ke)C(n).1 E F1(\);).24 E F0
(Continues the enumeration of all records inside the)144 588 Q F2(dfctx)
2.5 E F0 2.5(,t).53 G(able)-2.5 E F2(tblid)2.5 E F0 2.5(,i).77 G
(nitiated with a call to)-2.5 E F2(smdb_dbf_\214r)144 600 Q(st)-.1 E F0
2.5(\(\). The).68 F(record data is stored in the supplied)2.5 E F2 -.37
(re)2.5 G(c).37 E F0(parameter)2.81 E 2.5(,w)-.4 G(hile the)-2.5 E F2
-.1(ke)2.5 G(n).1 E F0(parameter)2.74 E(is used to store the)144 612 Q
F1(SMDB)2.5 E F0(pri)2.5 E -.25(va)-.25 G(te enumeration conte).25 E 2.5
(xt. The)-.15 F(function returns a number greater)2.5 E
(than 0 in case of positi)144 624 Q .3 -.15(ve l)-.25 H
(ookup, 0 in case of missing lookup, and -1 in case of error).15 E(.)
-.55 E F1 -.1(vo)108 652.8 S(id).1 E F2(smdb_dbf_fr)2.84 E(ee_r)-.37 E
(ecor)-.37 E(d)-.37 E F1(\(struct smdb_db\214le_ctx *).77 E F2(dfctx).35
E F1 2.5(,s).53 G(truct smdb_db_r)-2.5 E(ecord *)-.18 E F2 -.37(re)C(c)
.37 E F1(\);).31 E F0(Frees the resources allocated for the)144 676.8 Q
F2 -.37(re)2.5 G(c).37 E F0(record, inside the)2.81 E F2(dfctx)2.85 E F0
2.5(database. F)3.03 F(ailure to call)-.15 E F2(smdb_dbf_fr)144 688.8 Q
(ee_r)-.37 E(ecor)-.37 E(d)-.37 E F0
(\(\) after a successful lookup from).77 E F2(smdb_dbf_g)144 700.8 Q(et)
-.1 E F0(\(\),).68 E F2(smdb_dbf_g).34 E(et_ne)-.1 E(xt)-.2 E F0(\(\),)
.68 E F2(smdb_dbf_\214r).34 E(st)-.1 E F0(\(\), or).68 E F2(smdb_dbf_fr)
2.84 E(ee_r)-.37 E(ecor)-.37 E(d)-.37 E F0(\(\), will cause).77 E
(resource leakage inside the system.)144 712.8 Q 203.59(GNU 0.4)72 768 R
(6)222.75 E 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E/F1 10/Times-Bold@0 SF
(int)108 84 Q/F2 10/Times-Italic@0 SF(smdb_dbf_put)2.84 E F1
(\(struct smdb_db\214le_ctx *).68 E F2(dfctx).35 E F1 2.5(,u).53 G
(nsigned int)-2.5 E F2(tblid).13 E F1 2.5(,s).77 G(truct smdb_db_ck)-2.5
E(ey const *)-.1 E F2 -.1(ke)C(y)-.2 E F1(,).32 E
(struct smdb_db_cdata *)108 96 Q F2(data).35 E F1(\);).26 E F0
(Stores the record speci\214ed by the)144 120 Q F2 -.1(ke)2.5 G(y)-.2 E
F0(and)2.82 E F2(data)2.85 E F0(pair)2.76 E 2.5(,i)-.4 G
(nside the database)-2.5 E F2(dfctx)2.5 E F0 2.5(,t).53 G(able)-2.5 E F2
(tblid)2.5 E F0 5(.T).77 G(he)-5 E
(function returns 0 in case of success, and -1 in case of error)144 132
Q(.)-.55 E F1(int)108 160.8 Q F2(smdb_dbf_er)2.84 E(ase)-.15 E F1
(\(struct smdb_db\214le_ctx *).18 E F2(dfctx).35 E F1 2.5(,u).53 G
(nsigned int)-2.5 E F2(tblid).13 E F1 2.5(,s).77 G(truct smdb_db_ck)-2.5
E(ey const *)-.1 E F2 -.1(ke)C(y)-.2 E F1(,).32 E
(struct smdb_db_cdata const *)108 172.8 Q F2(data).35 E F1(\);).26 E F0
(Remo)144 196.8 Q -.15(ve)-.15 G 2.5(sar).15 G(ecord from inside the)
-2.5 E F2(dfctx)2.5 E F0 2.5(,t).53 G(able)-2.5 E F2(tblid)2.5 E F0 5
(.T).77 G(he)-5 E F2 -.1(ke)2.5 G(y)-.2 E F0
(parameter speci\214es the k)2.82 E .3 -.15(ey u)-.1 H(sed to).15 E
(lookup and delete the record.)144 208.8 Q(If)5 E F2(data)2.85 E F0(is)
2.76 E F1(NULL)2.5 E F0 2.5(,t)C(he \214rst matching)-2.5 E F2 -.1(ke)
2.5 G(y)-.2 E F0(is remo)2.82 E -.15(ve)-.15 G 2.5(df).15 G
(rom the data-)-2.5 E 2.5(base. Otherwise,)144 220.8 R F2(data)2.85 E F0
(is used for e)2.76 E(xtra record matching before deletion.)-.15 E
(The function returns a)5 E(number greater than 0 in case of positi)144
232.8 Q .3 -.15(ve e)-.25 H
(limination, 0 in case of missing lookup, and -1 in case).15 E(of error)
144 244.8 Q(.)-.55 E/F3 10.95/Times-Bold@0 SF
(Example Interface Implementation)72 285.6 Q F0(Here is reported an e)
108 297.6 Q(xample implementation for the e)-.15 E(xternal interf)-.15 E
(aces required by the)-.1 E F1(SMDB)2.5 E F0(functional-)2.5 E(ity:)108
309.6 Q(#include <stdio.h>)108 333.6 Q(#include <stdlib)108 345.6 Q(.h>)
-.4 E(#include <unistd.h>)108 357.6 Q(#include <string.h>)108 369.6 Q
(#include <sys/types.h>)108 381.6 Q(#include <sys/stat.h>)108 393.6 Q
(#include <fcntl.h>)108 405.6 Q(#include "smdb-incl.h")108 417.6 Q
(#include "smdb-xif-posix.h")108 429.6 Q(#ifdef _WIN32)108 453.6 Q
(#include <windo)108 465.6 Q(ws.h>)-.25 E(#include <io.h>)108 477.6 Q
(#de\214ne O_RDONL)108 501.6 Q 2.5(Y_)-1 G(O_RDONL)-2.5 E(Y)-1 E
(#de\214ne O_CREA)108 513.6 Q 2.5(T_)-1.11 G(O_CREA)-2.5 E(T)-1.11 E
(#de\214ne O_RD)108 525.6 Q(WR _O_RD)-.3 E(WR)-.3 E(#de\214ne O_TR)108
537.6 Q(UNC _O_TR)-.4 E(UNC)-.4 E
(#de\214ne open\(f, m, p\) _open\(f, \(m\) | _O_BIN)108 561.6 Q(AR)-.35
E(Y\))-.65 E(#de\214ne read\(f, d, n\) _read\(f, d, n\))108 573.6 Q
(#de\214ne write\(f, d, n\) _write\(f, d, n\))108 585.6 Q
(#de\214ne lseek\(f, o, w\) _lseek\(f, o, w\))108 597.6 Q
(#de\214ne fsync\(f\) _commit\(f\))108 609.6 Q
(#de\214ne mkdir\(n, p\) _mkdir\(n\))108 621.6 Q
(#de\214ne rmdir\(n\) _rmdir\(n\))108 633.6 Q(#endif)108 657.6 Q
(struct smdbxi_mem_px {)108 693.6 Q(struct smdbxi_mem ifc;)144 705.6 Q
(long usecnt;)144 717.6 Q(};)108 729.6 Q 203.59(GNU 0.4)72 768 R(7)
222.75 E 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(struct smdbxi_\214le_px {)108 84 Q(struct smdbxi_\214le ifc;)144 96 Q
(long usecnt;)144 108 Q(int fd;)144 120 Q(int closefd;)144 132 Q
(char *\214lename;)144 144 Q(int unlink\214le;)144 156 Q(};)108 168 Q
(struct smdbxi_fs_px {)108 192 Q(struct smdbxi_fs ifc;)144 204 Q
(long usecnt;)144 216 Q(};)108 228 Q(struct smdbxi_f)108 252 Q
(actory_px {)-.1 E(struct smdbxi_f)144 264 Q(actory ifc;)-.1 E
(long usecnt;)144 276 Q(long seqf;)144 288 Q(};)108 300 Q
(#if de\214ned\(WIN32\))108 336 Q(static int ftruncate\(int fd, smdb_of)
108 360 Q(fset_t size\))-.25 E({)108 372 Q(HANDLE h\214le;)144 384 Q
(LARGE_INTEGER cpos, lsize;)144 396 Q
(h\214le = \(HANDLE\) _get_osfhandle\(fd\);)144 420 Q(lsize.QuadP)144
432 Q(art = 0;)-.15 E
(if \(!SetFilePointerEx\(h\214le, lsize, &cpos, FILE_CURRENT\)\))144 444
Q(return -1;)180 456 Q(lsize.QuadP)144 468 Q(art = size;)-.15 E
(if \(!SetFilePointerEx\(h\214le, lsize, &cpos, FILE_BEGIN\)\))144 480 Q
(return -1;)180 492 Q(if \(!SetEndOfFile\(h\214le\)\) {)144 504 Q
(lsize = cpos;)180 516 Q
(SetFilePointerEx\(h\214le, lsize, &cpos, FILE_BEGIN\);)180 528 Q
(return -1;)180 540 Q(})144 552 Q(if \(cpos.QuadP)144 564 Q
(art > size\))-.15 E(cpos.QuadP)180 576 Q(art = size;)-.15 E
(SetFilePointerEx\(h\214le, cpos, NULL, FILE_BEGIN\);)144 588 Q
(return 0;)144 612 Q(})108 624 Q(#endif)108 648 Q
(static int smdb_xif_mem__get\(v)108 672 Q(oid *pri)-.2 E(v\))-.25 E({)
108 684 Q(struct smdbxi_mem_px *pif = \(struct smdbxi_mem_px *\) pri)144
696 Q(v;)-.25 E(pif->usecnt++;)144 720 Q 203.59(GNU 0.4)72 768 R(8)
222.75 E 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E(return 0;)144 84 Q(})
108 96 Q(static int smdb_xif_mem__release\(v)108 120 Q(oid *pri)-.2 E
(v\))-.25 E({)108 132 Q
(struct smdbxi_mem_px *pif = \(struct smdbxi_mem_px *\) pri)144 144 Q
(v;)-.25 E(if \(!--pif->usecnt\) {)144 168 Q(free\(pif\);)180 192 Q(})
144 204 Q(return 0;)144 228 Q(})108 240 Q(static v)108 264 Q
(oid *smdb_xif_mem__alloc\(v)-.2 E(oid *pri)-.2 E 1.3 -.65(v, i)-.25 H
(nt size\)).65 E({)108 276 Q(return malloc\(size\);)144 288 Q(})108 300
Q(static v)108 324 Q(oid smdb_xif_mem__free\(v)-.2 E(oid *pri)-.2 E 1.3
-.65(v, v)-.25 H(oid *data\)).45 E({)108 336 Q(free\(data\);)144 348 Q
(})108 360 Q(static struct smdbxi_mem *smdb_xif_mem\(v)108 384 Q(oid\))
-.2 E({)108 396 Q(struct smdbxi_mem_px *pif;)144 408 Q
(if \(\(pif = \(struct smdbxi_mem_px *\))144 432 Q
(malloc\(sizeof\(struct smdbxi_mem_px\)\)\) == NULL\))156.5 444 Q
(return NULL;)180 456 Q(pif->ifc.pri)144 468 Q 2.5(v=p)-.25 G(if;)-2.5 E
(pif->ifc.get = smdb_xif_mem__get;)144 480 Q
(pif->ifc.release = smdb_xif_mem__release;)144 492 Q
(pif->ifc.alloc = smdb_xif_mem__alloc;)144 504 Q
(pif->ifc.free = smdb_xif_mem__free;)144 516 Q(pif->usecnt = 1;)144 528
Q(return &pif->ifc;)144 552 Q(})108 564 Q
(static int smdb_xif_\214le__get\(v)108 588 Q(oid *pri)-.2 E(v\))-.25 E
({)108 600 Q
(struct smdbxi_\214le_px *pif = \(struct smdbxi_\214le_px *\) pri)144
612 Q(v;)-.25 E(pif->usecnt++;)144 636 Q(return 0;)144 660 Q(})108 672 Q
(static int smdb_xif_\214le__release\(v)108 696 Q(oid *pri)-.2 E(v\))
-.25 E({)108 708 Q
(struct smdbxi_\214le_px *pif = \(struct smdbxi_\214le_px *\) pri)144
720 Q(v;)-.25 E 203.59(GNU 0.4)72 768 R(9)222.75 E 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(if \(!--pif->usecnt\) {)144 84 Q(if \(pif->closefd\))180 96 Q
(close\(pif->fd\);)216 108 Q(if \(pif->\214lename != NULL\) {)180 120 Q
(if \(pif->unlink\214le\))216 132 Q(remo)252 144 Q -.15(ve)-.15 G
(\(pif->\214lename\);).15 E(free\(pif->\214lename\);)216 156 Q(})180 168
Q(free\(pif\);)180 180 Q(})144 192 Q(return 0;)144 216 Q(})108 228 Q
(static smdb_of)108 252 Q(fset_t smdb_xif_\214le__seek\(v)-.25 E
(oid *pri)-.2 E 1.3 -.65(v, s)-.25 H(mdb_of).65 E(fset_t of)-.25 E
(f, int whence\))-.25 E({)108 264 Q
(struct smdbxi_\214le_px *pif = \(struct smdbxi_\214le_px *\) pri)144
276 Q(v;)-.25 E(return lseek\(pif->fd, \(of)144 300 Q(f_t\) of)-.25 E
(f, whence\);)-.25 E(})108 312 Q(static int smdb_xif_\214le__read\(v)108
336 Q(oid *pri)-.2 E 1.3 -.65(v, v)-.25 H(oid *b).45 E(uf, int n\))-.2 E
({)108 348 Q
(struct smdbxi_\214le_px *pif = \(struct smdbxi_\214le_px *\) pri)144
360 Q(v;)-.25 E(return read\(pif->fd, b)144 384 Q(uf, n\);)-.2 E(})108
396 Q(static int smdb_xif_\214le__write\(v)108 420 Q(oid *pri)-.2 E 1.3
-.65(v, v)-.25 H(oid const *b).45 E(uf, int n\))-.2 E({)108 432 Q
(struct smdbxi_\214le_px *pif = \(struct smdbxi_\214le_px *\) pri)144
444 Q(v;)-.25 E(return write\(pif->fd, b)144 468 Q(uf, n\);)-.2 E(})108
480 Q(static int smdb_xif_\214le__truncate\(v)108 504 Q(oid *pri)-.2 E
1.3 -.65(v, s)-.25 H(mdb_of).65 E(fset_t size\))-.25 E({)108 516 Q
(struct smdbxi_\214le_px *pif = \(struct smdbxi_\214le_px *\) pri)144
528 Q(v;)-.25 E(return ftruncate\(pif->fd, \(of)144 552 Q(f_t\) size\);)
-.25 E(})108 564 Q(static int smdb_xif_\214le__sync\(v)108 588 Q
(oid *pri)-.2 E(v\))-.25 E({)108 600 Q
(struct smdbxi_\214le_px *pif = \(struct smdbxi_\214le_px *\) pri)144
612 Q(v;)-.25 E(return fsync\(pif->fd\);)144 636 Q(})108 648 Q
(static char const *smdb_xif_\214le__path\(v)108 672 Q(oid *pri)-.2 E
(v\))-.25 E({)108 684 Q
(struct smdbxi_\214le_px *pif = \(struct smdbxi_\214le_px *\) pri)144
696 Q(v;)-.25 E(return pif->\214lename;)144 720 Q 203.59(GNU 0.4)72 768
R(10)217.75 E 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E(})108 84 Q(struct sm\
dbxi_\214le *smdb_xif_\214le\(int fd, int closefd, char const *\214lena\
me,)108 108 Q(int \215ags, int unlink\214le\))257 120 Q({)108 132 Q
(int lfd = -1;)144 144 Q(struct smdbxi_\214le_px *pif;)144 156 Q
(if \(fd < 0\) {)144 180 Q(if \(\214lename == NULL\))180 192 Q
(return NULL;)216 204 Q(switch \(\215ags\))180 216 Q({)180 228 Q
(case SMDBXI_FL_R)180 240 Q(OPEN:)-.4 E(\215ags = O_RDONL)216 252 Q -.92
(Y;)-1 G(break;)216 264 Q(case SMDBXI_FL_R)180 276 Q -.1(WO)-.55 G(PEN:)
.1 E(\215ags = O_RD)216 288 Q(WR;)-.3 E(break;)216 300 Q
(case SMDBXI_FL_CREA)180 312 Q(TE:)-1.11 E(\215ags = O_RD)216 324 Q
(WR | O_CREA)-.3 E -.55(T;)-1.11 G(break;)216 336 Q(case SMDBXI_FL_CREA)
180 348 Q(TENEW)-1.11 E(:)-.37 E(\215ags = O_RD)216 360 Q(WR | O_CREA)
-.3 E 2.5(T|O)-1.11 G(_TR)-2.5 E(UNC;)-.4 E(break;)216 372 Q(def)180 384
Q(ault:)-.1 E(return NULL;)216 396 Q(})180 408 Q
(if \(\(fd = lfd = open\(\214lename, \215ags, 0644\)\) == -1\))180 420 Q
(return NULL;)216 432 Q(closefd = 1;)180 444 Q(})144 456 Q
(if \(\(pif = \(struct smdbxi_\214le_px *\))144 468 Q
(malloc\(sizeof\(struct smdbxi_\214le_px\)\)\) == NULL\) {)156.5 480 Q
(if \(lfd != -1\) {)180 492 Q(close\(lfd\);)216 504 Q
(if \(unlink\214le\))216 516 Q(remo)252 528 Q -.15(ve)-.15 G
(\(\214lename\);).15 E(})180 540 Q(return NULL;)180 552 Q(})144 564 Q
(pif->ifc.pri)144 576 Q 2.5(v=p)-.25 G(if;)-2.5 E
(pif->ifc.get = smdb_xif_\214le__get;)144 588 Q
(pif->ifc.release = smdb_xif_\214le__release;)144 600 Q
(pif->ifc.seek = smdb_xif_\214le__seek;)144 612 Q
(pif->ifc.read = smdb_xif_\214le__read;)144 624 Q
(pif->ifc.write = smdb_xif_\214le__write;)144 636 Q
(pif->ifc.truncate = smdb_xif_\214le__truncate;)144 648 Q
(pif->ifc.sync = smdb_xif_\214le__sync;)144 660 Q
(pif->ifc.path = smdb_xif_\214le__path;)144 672 Q(pif->usecnt = 1;)144
684 Q(pif->fd = fd;)144 696 Q(pif->closefd = closefd;)144 708 Q
(pif->\214lename = \214lename != NULL ? strdup\(\214lename\): NULL;)144
720 Q 203.59(GNU 0.4)72 768 R(11)217.75 E 0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(pif->unlink\214le = unlink\214le;)144 84 Q(return &pif->ifc;)144 108 Q
(})108 120 Q(static int smdb_xif_fs__get\(v)108 144 Q(oid *pri)-.2 E
(v\))-.25 E({)108 156 Q
(struct smdbxi_fs_px *pif = \(struct smdbxi_fs_px *\) pri)144 168 Q(v;)
-.25 E(pif->usecnt++;)144 192 Q(return 0;)144 216 Q(})108 228 Q
(static int smdb_xif_fs__release\(v)108 252 Q(oid *pri)-.2 E(v\))-.25 E
({)108 264 Q(struct smdbxi_fs_px *pif = \(struct smdbxi_fs_px *\) pri)
144 276 Q(v;)-.25 E(if \(!--pif->usecnt\) {)144 300 Q(free\(pif\);)180
324 Q(})144 336 Q(return 0;)144 360 Q(})108 372 Q
(static struct smdbxi_\214le *smdb_xif_fs__open\(v)108 396 Q(oid *pri)
-.2 E 1.3 -.65(v, c)-.25 H(har const *path,).65 E(int \215ags\))300.5
408 Q({)108 420 Q(return smdb_xif_\214le\(-1, 0, path, \215ags, 0\);)144
432 Q(})108 444 Q(static int smdb_xif_fs__remo)108 468 Q -.15(ve)-.15 G
(\(v).15 E(oid *pri)-.2 E 1.3 -.65(v, c)-.25 H(har const *path\)).65 E
({)108 480 Q(return remo)144 492 Q -.15(ve)-.15 G(\(path\);).15 E(})108
504 Q(static int smdb_xif_fs__rename\(v)108 528 Q(oid *pri)-.2 E 1.3
-.65(v, c)-.25 H(har const *opath, char const *npath\)).65 E({)108 540 Q
(return rename\(opath, npath\);)144 552 Q(})108 564 Q
(static int smdb_xif_fs__mkdir\(v)108 588 Q(oid *pri)-.2 E 1.3 -.65
(v, c)-.25 H(har const *path\)).65 E({)108 600 Q
(return mkdir\(path, 0775\);)144 612 Q(})108 624 Q
(static int smdb_xif_fs__rmdir\(v)108 648 Q(oid *pri)-.2 E 1.3 -.65
(v, c)-.25 H(har const *path\)).65 E({)108 660 Q(return rmdir\(path\);)
144 672 Q(})108 684 Q(static struct smdbxi_fs *smdb_xif_fs\(v)108 708 Q
(oid\))-.2 E({)108 720 Q 203.59(GNU 0.4)72 768 R(12)217.75 E 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(struct smdbxi_fs_px *pif;)144 84 Q
(if \(\(pif = \(struct smdbxi_fs_px *\))144 108 Q
(malloc\(sizeof\(struct smdbxi_fs_px\)\)\) == NULL\))156.5 120 Q
(return NULL;)180 132 Q(pif->ifc.pri)144 144 Q 2.5(v=p)-.25 G(if;)-2.5 E
(pif->ifc.get = smdb_xif_fs__get;)144 156 Q
(pif->ifc.release = smdb_xif_fs__release;)144 168 Q
(pif->ifc.open = smdb_xif_fs__open;)144 180 Q(pif->ifc.remo)144 192 Q .3
-.15(ve = s)-.15 H(mdb_xif_fs__remo).15 E -.15(ve)-.15 G(;).15 E
(pif->ifc.rename = smdb_xif_fs__rename;)144 204 Q
(pif->ifc.mkdir = smdb_xif_fs__mkdir;)144 216 Q
(pif->ifc.rmdir = smdb_xif_fs__rmdir;)144 228 Q(pif->usecnt = 1;)144 240
Q(return &pif->ifc;)144 264 Q(})108 276 Q(static int smdb_xif_f)108 300
Q(actory__get\(v)-.1 E(oid *pri)-.2 E(v\))-.25 E({)108 312 Q
(struct smdbxi_f)144 324 Q(actory_px *pif = \(struct smdbxi_f)-.1 E
(actory_px *\) pri)-.1 E(v;)-.25 E(pif->usecnt++;)144 348 Q(return 0;)
144 372 Q(})108 384 Q(static int smdb_xif_f)108 408 Q
(actory__release\(v)-.1 E(oid *pri)-.2 E(v\))-.25 E({)108 420 Q
(struct smdbxi_f)144 432 Q(actory_px *pif = \(struct smdbxi_f)-.1 E
(actory_px *\) pri)-.1 E(v;)-.25 E(if \(!--pif->usecnt\) {)144 456 Q
(free\(pif\);)180 480 Q(})144 492 Q(return 0;)144 516 Q(})108 528 Q
(static struct smdbxi_mem *smdb_xif_f)108 552 Q(actory__mem\(v)-.1 E
(oid *pri)-.2 E(v\))-.25 E({)108 564 Q(return smdb_xif_mem\(\);)144 576
Q(})108 588 Q(static struct smdbxi_fs *smdb_xif_f)108 612 Q
(actory__fs\(v)-.1 E(oid *pri)-.2 E(v\))-.25 E({)108 624 Q
(return smdb_xif_fs\(\);)144 636 Q(})108 648 Q
(static struct smdbxi_\214le *smdb_xif_f)108 672 Q(actory__\214le\(v)-.1
E(oid *pri)-.2 E(v\))-.25 E({)108 684 Q(struct smdbxi_f)144 696 Q
(actory_px *pif = \(struct smdbxi_f)-.1 E(actory_px *\) pri)-.1 E(v;)
-.25 E(char \214lename[256];)144 708 Q 203.59(GNU 0.4)72 768 R(13)217.75
E 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(sprintf\(\214lename, "%p-%ld.tmp", pri)144 84 Q 1.3 -.65(v, p)-.25 H
(if->seqf++\);).65 E(return smdb_xif_\214le\(-1, 1, \214lename, O_CREA)
144 108 Q 2.5(T|O)-1.11 G(_RD)-2.5 E(WR | O_TR)-.3 E(UNC, 1\);)-.4 E(})
108 120 Q(struct smdbxi_f)108 144 Q(actory *smdb_xif_f)-.1 E(actory\(v)
-.1 E(oid\))-.2 E({)108 156 Q(struct smdbxi_f)144 168 Q(actory_px *pif;)
-.1 E(if \(\(pif = \(struct smdbxi_f)144 192 Q(actory_px *\))-.1 E
(malloc\(sizeof\(struct smdbxi_f)156.5 204 Q(actory_px\)\)\) == NULL\))
-.1 E(return NULL;)180 216 Q(pif->ifc.pri)144 228 Q 2.5(v=p)-.25 G(if;)
-2.5 E(pif->ifc.get = smdb_xif_f)144 240 Q(actory__get;)-.1 E
(pif->ifc.release = smdb_xif_f)144 252 Q(actory__release;)-.1 E
(pif->ifc.mem = smdb_xif_f)144 264 Q(actory__mem;)-.1 E
(pif->ifc.\214le = smdb_xif_f)144 276 Q(actory__\214le;)-.1 E
(pif->ifc.fs = smdb_xif_f)144 288 Q(actory__fs;)-.1 E(pif->usecnt = 1;)
144 300 Q(pif->seqf = 0;)144 312 Q(return &pif->ifc;)144 336 Q(})108 348
Q/F1 10.95/Times-Bold@0 SF(EXAMPLE CODE)72 388.8 Q F0(The follo)108
400.8 Q(wing code \(also included inside the)-.25 E/F2 10/Times-Bold@0
SF(SMDB)2.5 E F0(distrib)2.5 E(ution package\) brie\215y sho)-.2 E
(ws ho)-.25 E 2.5(wt)-.25 G 2.5(ou)-2.5 G(se the)-2.5 E F2(SMDB)108
412.8 Q F0(library:)2.5 E(#include <stdio.h>)108 436.8 Q
(#include <stdlib)108 448.8 Q(.h>)-.4 E(#include <string.h>)108 460.8 Q
(#include "smdb-incl.h")108 472.8 Q(#include "smdb-xif-posix.h")108
484.8 Q(#de\214ne MODE_PUT 1)108 508.8 Q(#de\214ne MODE_GET 2)108 520.8
Q(#de\214ne MODE_ERASE 3)108 532.8 Q(#de\214ne MODE_CMP 4)108 544.8 Q
(#de\214ne MODE_DUMP 5)108 556.8 Q(#de\214ne MODE_RMT)108 568.8 Q
(ABLE 6)-.93 E(#de\214ne MODE_MKT)108 580.8 Q(ABLE 7)-.93 E(static v)108
604.8 Q(oid *load_\214le\(char const *path, long *pfsize\))-.2 E({)108
616.8 Q(long fsize;)144 628.8 Q -.2(vo)144 640.8 S(id *fdata;).2 E
(FILE *\214le;)144 652.8 Q
(if \(\(\214le = fopen\(path, "rb"\)\) == NULL\) {)144 676.8 Q
(perror\(path\);)180 688.8 Q(return NULL;)180 700.8 Q(})144 712.8 Q
(fseek\(\214le, 0, SEEK_END\);)144 724.8 Q 203.59(GNU 0.4)72 768 R(14)
217.75 E 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(fsize = ftell\(\214le\);)144 84 Q(re)144 96 Q(wind\(\214le\);)-.25 E
(if \(\(fdata = malloc\(fsize + 1\)\) == NULL\) {)144 108 Q
(perror\("allocating \214le data"\);)180 120 Q(fclose\(\214le\);)180 132
Q(return NULL;)180 144 Q(})144 156 Q(if \(fread\(fdata, 1, \(size_t\) f\
size, \214le\) != \(size_t\) fsize\) {)144 168 Q(perror\(path\);)180 180
Q(free\(fdata\);)180 192 Q(fclose\(\214le\);)180 204 Q(return NULL;)180
216 Q(})144 228 Q(fclose\(\214le\);)144 240 Q
(\(\(char *\) fdata\)[fsize] = 0;)144 252 Q(*pfsize = fsize;)144 264 Q
(return fdata;)144 288 Q(})108 300 Q(static char **get_\215ist\(char **\
i\214les, int in\214les, char const *\215path,)108 324 Q
(int *pn\214les\))216 336 Q({)108 348 Q(int i, nalloc;)144 360 Q
(long fsize;)144 372 Q(char *fdata, *tok;)144 384 Q
(char **\215ist, **n\215ist;)144 396 Q(if \(\215path == NULL\) {)144 420
Q(nalloc = in\214les + 1;)180 432 Q(if \(\(\215ist = \(char **\) malloc\
\(nalloc * sizeof\(char *\)\)\) == NULL\))180 444 Q(return NULL;)216 456
Q(for \(i = 0; i < in\214les; i++\))180 468 Q
(\215ist[i] = strdup\(i\214les[i]\);)216 480 Q(*pn\214les = in\214les;)
180 492 Q(return \215ist;)180 504 Q(})144 516 Q(if \(\(fdata = \(char *\
\) load_\214le\(\215path, &fsize\)\) == NULL\) {)144 528 Q
(perror\(\215path\);)180 540 Q(return NULL;)180 552 Q(})144 564 Q
(nalloc = in\214les + \(int\) \(fsize / 16\) + 1;)144 576 Q(if \(\(\215\
ist = \(char **\) malloc\(nalloc * sizeof\(char *\)\)\) == NULL\) {)144
588 Q(free\(fdata\);)180 600 Q(return NULL;)180 612 Q(})144 624 Q
(for \(i = 0; i < in\214les; i++\))144 636 Q
(\215ist[i] = strdup\(i\214les[i]\);)180 648 Q
(for \(tok = strtok\(fdata, ")144 660 Q(0\); tok != NULL;)-10 I
(tok = strtok\(NULL, ")156.5 672 Q(0\)\) {)-10 I(if \(i >= nalloc\) {)
180 684 Q(nalloc = nalloc * 2 + 32;)216 696 Q
(if \(\(n\215ist = \(char **\))216 708 Q
(realloc\(\215ist, nalloc * sizeof\(char *\)\)\) == NULL\) {)228.5 720 Q
203.59(GNU 0.4)72 768 R(15)217.75 E 0 Cg EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(for \(i--; i >= 0; i--\))252 84 Q(free\(\215ist[i]\);)288 96 Q
(free\(\215ist\);)252 108 Q(free\(fdata\);)252 120 Q(return NULL;)252
132 Q(})216 144 Q(})180 156 Q(\215ist[i++] = strdup\(tok\);)180 168 Q(})
144 180 Q(free\(fdata\);)144 192 Q(*pn\214les = i;)144 204 Q
(return \215ist;)144 228 Q(})108 240 Q(static v)108 264 Q
(oid free_\215ist\(char **\215ist, int n\))-.2 E({)108 276 Q
(if \(\215ist != NULL\) {)144 288 Q(for \(; n > 0; n--\))180 300 Q
(free\(\215ist[n - 1]\);)216 312 Q(})144 324 Q(free\(\215ist\);)144 336
Q(})108 348 Q(int main\(int ac, char **a)108 372 Q(v\))-.2 E({)108 384 Q
(int i, error)144 396 Q 2.5(,n)-.4 G(\214les, mode = MODE_PUT)-2.5 E 2.5
(,j)-.74 G(ournal = 0;)-2.5 E(unsigned int tblsize = 16000, tblid = 0;)
144 408 Q(long fsize, rcount;)144 420 Q -.2(vo)144 432 S(id *fdata;).2 E
(char **\214les;)144 444 Q(char const *path = NULL, *\215path = NULL;)
144 456 Q(struct smdbxi_f)144 468 Q(actory *f)-.1 E(ac;)-.1 E
(struct smdbxi_\214le *\214le;)144 480 Q
(struct smdb_db\214le_ctx *dfctx;)144 492 Q
(struct smdb_db_con\214g dbcfg;)144 504 Q(struct smdb_db_ck)144 516 Q .3
-.15(ey c)-.1 H -.1(ke).15 G(y;)-.05 E(struct smdb_db_cdata cdata;)144
528 Q(struct smdb_db_record rec;)144 540 Q(struct smdb_db_k)144 552 Q
(enum k)-.1 E(en;)-.1 E(MZER)144 576 Q(O\(dbcfg\);)-.4 E
(dbcfg.blk_size = 1024;)144 588 Q(dbcfg.blk_count = 100 * 1024;)144 600
Q(dbcfg.cache_size = 64 * 1024;)144 612 Q(dbcfg.num_tables = 16;)144 624
Q(for \(i = 1; i < ac; i++\) {)144 636 Q(if \(strcmp\(a)180 648 Q
(v[i], "-f"\) == 0\) {)-.2 E(if \(++i < ac\))216 660 Q(path = a)252 672
Q(v[i];)-.2 E 2.5(}e)180 684 S(lse if \(strcmp\(a)-2.5 E
(v[i], "-l"\) == 0\) {)-.2 E(if \(++i < ac\))216 696 Q(\215path = a)252
708 Q(v[i];)-.2 E 2.5(}e)180 720 S(lse if \(strcmp\(a)-2.5 E
(v[i], "-b"\) == 0\) {)-.2 E 203.59(GNU 0.4)72 768 R(16)217.75 E 0 Cg EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E(if \(++i < ac\))216
84 Q(dbcfg.blk_size = strtoul\(a)252 96 Q(v[i], NULL, 0\);)-.2 E 2.5(}e)
180 108 S(lse if \(strcmp\(a)-2.5 E(v[i], "-c"\) == 0\) {)-.2 E
(if \(++i < ac\))216 120 Q(dbcfg.blk_count = strtoul\(a)252 132 Q
(v[i], NULL, 0\);)-.2 E 2.5(}e)180 144 S(lse if \(strcmp\(a)-2.5 E
(v[i], "-s"\) == 0\) {)-.2 E(if \(++i < ac\))216 156 Q
(dbcfg.cache_size = strtoul\(a)252 168 Q(v[i], NULL, 0\);)-.2 E 2.5(}e)
180 180 S(lse if \(strcmp\(a)-2.5 E(v[i], "-x"\) == 0\) {)-.2 E
(if \(++i < ac\))216 192 Q(tblsize = strtoul\(a)252 204 Q
(v[i], NULL, 0\);)-.2 E 2.5(}e)180 216 S(lse if \(strcmp\(a)-2.5 E
(v[i], "-T"\) == 0\) {)-.2 E(if \(++i < ac\))216 228 Q
(tblid = strtoul\(a)252 240 Q(v[i], NULL, 0\);)-.2 E 2.5(}e)180 252 S
(lse if \(strcmp\(a)-2.5 E(v[i], "-g"\) == 0\))-.2 E(mode = MODE_GET)216
264 Q(;)-.55 E(else if \(strcmp\(a)180 276 Q(v[i], "-e"\) == 0\))-.2 E
(mode = MODE_ERASE;)216 288 Q(else if \(strcmp\(a)180 300 Q
(v[i], "-m"\) == 0\))-.2 E(mode = MODE_CMP;)216 312 Q
(else if \(strcmp\(a)180 324 Q(v[i], "-d"\) == 0\))-.2 E
(mode = MODE_DUMP;)216 336 Q(else if \(strcmp\(a)180 348 Q
(v[i], "-R"\) == 0\))-.2 E(mode = MODE_RMT)216 360 Q(ABLE;)-.93 E
(else if \(strcmp\(a)180 372 Q(v[i], "-M"\) == 0\))-.2 E
(mode = MODE_MKT)216 384 Q(ABLE;)-.93 E(else if \(strcmp\(a)180 396 Q
(v[i], "-j"\) == 0\))-.2 E(journal = 1;)216 408 Q(else)180 420 Q(break;)
216 432 Q(})144 444 Q(if \(path == NULL\))144 456 Q(return 1;)180 468 Q
(if \(\(f)144 492 Q(ac = smdb_xif_f)-.1 E(actory\(\)\) == NULL\))-.1 E
(return 2;)180 504 Q
(if \(\(\214le = smdb_xif_\214le\(-1, 0, path, SMDBXI_FL_R)144 516 Q -.1
(WO)-.55 G(PEN, 0\)\) == NULL\) {).1 E
(if \(\(\214le = smdb_xif_\214le\(-1, 0, path, SMDBXI_FL_CREA)180 528 Q
(TENEW)-1.11 E(,)-.92 E(0\)\) == NULL\))293 540 Q(return 3;)216 552 Q
(if \(smdb_dbf_create\(f)180 564 Q(ac, \214le, &dbcfg, &dfctx\) < 0\))
-.1 E(return 4;)216 576 Q
(if \(smdb_dbf_create_table\(dfctx, tblid, tblsize\) < 0\))180 588 Q
(return 5;)216 600 Q 2.5(}e)144 612 S(lse {)-2.5 E
(if \(smdb_dbf_open\(f)180 624 Q(ac, \214le, &dbcfg, &dfctx\) < 0\))-.1
E(return 4;)216 636 Q(})144 648 Q(if \(\(\214les = get_\215ist\(&a)144
672 Q(v[i], ac - i, \215path, &n\214les\)\) == NULL\))-.2 E(return 6;)
180 684 Q(fprintf\(stdout, "Number of \214les: %d0, n\214les\);)144 708
Q 203.59(GNU 0.4)72 768 R(17)217.75 E 0 Cg EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E
(if \(journal && smdb_dbf_be)144 84 Q(gin\(dfctx\) < 0\))-.15 E
(return 7;)180 96 Q(if \(mode == MODE_GET\) {)144 120 Q
(for \(i = 0; i < n\214les; i++\) {)180 132 Q(ck)216 144 Q -.15(ey)-.1 G
(.data = \214les[i];)-.5 E(ck)216 156 Q -.15(ey)-.1 G
(.size = strlen\(\214les[i]\);)-.5 E
(if \(smdb_dbf_get\(dfctx, tblid, &ck)216 168 Q -.15(ey)-.1 G 2.5(,&)-.5
G(rec, &k)-2.5 E(en\) > 0\) {)-.1 E
(smdb_dbf_free_record\(dfctx, &rec\);)252 192 Q 2.5(}e)216 204 S(lse {)
-2.5 E(fprintf\(stderr)252 216 Q 2.5(,")-.4 G
(Record not found: '%s'0, \214les[i]\);)-2.5 E(})216 228 Q(})180 240 Q
2.5(}e)144 252 S(lse if \(mode == MODE_ERASE\) {)-2.5 E
(for \(i = 0; i < n\214les; i++\) {)180 264 Q(ck)216 276 Q -.15(ey)-.1 G
(.data = \214les[i];)-.5 E(ck)216 288 Q -.15(ey)-.1 G
(.size = strlen\(\214les[i]\);)-.5 E
(if \(smdb_dbf_erase\(dfctx, tblid, &ck)216 300 Q -.15(ey)-.1 G 2.5(,N)
-.5 G(ULL\) > 0\) {)-2.5 E 2.5(}e)216 324 S(lse {)-2.5 E
(fprintf\(stderr)252 336 Q 2.5(,")-.4 G
(Record not found: '%s'0, \214les[i]\);)-2.5 E(})216 348 Q(})180 360 Q
2.5(}e)144 372 S(lse if \(mode == MODE_PUT\) {)-2.5 E
(for \(i = 0; i < n\214les; i++\) {)180 384 Q
(if \(\(fdata = load_\214le\(\214les[i], &fsize\)\) == NULL\) {)216 396
Q(free_\215ist\(\214les, n\214les\);)252 408 Q(return 8;)252 420 Q(})216
432 Q(ck)216 456 Q -.15(ey)-.1 G(.data = \214les[i];)-.5 E(ck)216 468 Q
-.15(ey)-.1 G(.size = strlen\(\214les[i]\);)-.5 E(cdata.data = fdata;)
216 480 Q(cdata.size = fsize;)216 492 Q
(if \(smdb_dbf_put\(dfctx, tblid, &ck)216 504 Q -.15(ey)-.1 G 2.5(,&)-.5
G(cdata\) < 0\) {)-2.5 E(fprintf\(stderr)252 516 Q 2.5(,")-.4 G
(DD insert f)-2.5 E(ailed: '%s'0, \214les[i]\);)-.1 E
(free_\215ist\(\214les, n\214les\);)252 528 Q(return 9;)252 540 Q(})216
552 Q(free\(fdata\);)216 564 Q(})180 576 Q 2.5(}e)144 588 S
(lse if \(mode == MODE_CMP\) {)-2.5 E
(for \(i = 0; i < n\214les; i++\) {)180 600 Q
(if \(\(fdata = load_\214le\(\214les[i], &fsize\)\) == NULL\) {)216 612
Q(free_\215ist\(\214les, n\214les\);)252 624 Q(return 8;)252 636 Q(})216
648 Q(ck)216 672 Q -.15(ey)-.1 G(.data = \214les[i];)-.5 E(ck)216 684 Q
-.15(ey)-.1 G(.size = strlen\(\214les[i]\);)-.5 E
(if \(smdb_dbf_get\(dfctx, tblid, &ck)216 696 Q -.15(ey)-.1 G 2.5(,&)-.5
G(rec, &k)-2.5 E(en\) > 0\) {)-.1 E
(if \(rec.data.size != \(unsigned long\) fsize ||)252 708 Q
(memcmp\(rec.data.data, fdata, fsize\) != 0\))262 720 Q 203.59(GNU 0.4)
72 768 R(18)217.75 E 0 Cg EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E(fprintf\(stderr)288
84 Q 2.5(,")-.4 G(Record in DB dif)-2.5 E(fers: '%s'0,)-.25 E
(\214les[i]\);)324 96 Q(smdb_dbf_free_record\(dfctx, &rec\);)252 120 Q
2.5(}e)216 132 S(lse {)-2.5 E(fprintf\(stderr)252 144 Q 2.5(,")-.4 G
(Record not found: '%s'0, \214les[i]\);)-2.5 E(})216 156 Q
(free\(fdata\);)216 168 Q(})180 180 Q 2.5(}e)144 192 S
(lse if \(mode == MODE_DUMP\) {)-2.5 E(rcount = 0;)180 204 Q
(if \(\(error = smdb_dbf_\214rst\(dfctx, tblid, &rec, &k)180 216 Q
(en\)\) > 0\) {)-.1 E(do {)216 228 Q
(fprintf\(stdout, "KEY \(%ld\)='", rec.k)252 240 Q -.15(ey)-.1 G
(.size\);)-.5 E(fwrite\(rec.k)252 252 Q -.15(ey)-.1 G(.data, 1, rec.k)
-.5 E -.15(ey)-.1 G(.size, stdout\);)-.5 E(fprintf\(stdout, "'0\);)252
264 Q(fprintf\(stdout, "D)252 288 Q -1.21 -1.11(AT A)-.4 H
(\(%ld\)0, rec.data.size\);)3.61 E(smdb_dbf_free_record\(dfctx, &rec\);)
252 312 Q(rcount++;)252 324 Q 2.5(}w)216 336 S
(hile \(\(error = smdb_dbf_ne)-2.5 E(xt\(dfctx, &rec, &k)-.15 E
(en\)\) > 0\);)-.1 E(})180 348 Q(if \(error < 0\) {)180 360 Q
(fprintf\(stderr)216 372 Q 2.5(,")-.4 G(Record enumeration f)-2.5 E
(ailed!0\);)-.1 E(free_\215ist\(\214les, n\214les\);)216 384 Q
(return 9;)216 396 Q(})180 408 Q
(fprintf\(stdout, "0ound %ld records.0, rcount\);)180 420 Q 2.5(}e)144
432 S(lse if \(mode == MODE_RMT)-2.5 E(ABLE\) {)-.93 E
(if \(smdb_dbf_free_table\(dfctx, tblid\) < 0\) {)180 444 Q
(fprintf\(stderr)216 456 Q 2.5(,")-.4 G -.8(Ta)-2.5 G(ble remo).8 E .3
-.15(ve f)-.15 H(ailed!0\);).05 E(return 11;)216 468 Q(})180 480 Q 2.5
(}e)144 492 S(lse if \(mode == MODE_MKT)-2.5 E(ABLE\) {)-.93 E
(if \(smdb_dbf_create_table\(dfctx, tblid, tblsize\) < 0\) {)180 504 Q
(fprintf\(stderr)216 516 Q 2.5(,")-.4 G -.8(Ta)-2.5 G(ble create f).8 E
(ailed!0\);)-.1 E(return 11;)216 528 Q(})180 540 Q(})144 552 Q
(free_\215ist\(\214les, n\214les\);)144 576 Q
(if \(journal && smdb_dbf_end\(dfctx\) < 0\))144 588 Q(return 12;)180
600 Q(smdb_dbf_free\(dfctx\);)144 624 Q(SMDBXI_RELEASE\(\214le\);)144
636 Q(SMDBXI_RELEASE\(f)144 648 Q(ac\);)-.1 E(return 0;)144 672 Q(})108
684 Q 203.59(GNU 0.4)72 768 R(19)217.75 E 0 Cg EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 121.495(SMDB\(3\) SMDB)72 48 R 2.5(-S)2.5 G
(imple/Small DB Library)-2.5 E(SMDB\(3\))123.995 E/F1 10.95/Times-Bold@0
SF(LICENSE)72 84 Q F0(This library is free softw)108 96 Q
(are; you can redistrib)-.1 E
(ute it and/or modify it under the terms of the GNU Lesser)-.2 E
(General Public License as published by the Free Softw)108 108 Q(are F)
-.1 E(oundation; either v)-.15 E(ersion 2.1 of the License, or)-.15 E
(\(at your option\) an)108 120 Q 2.5(yl)-.15 G(ater v)-2.5 E 2.5
(ersion. A)-.15 F(cop)2.5 E 2.5(yo)-.1 G 2.5(ft)-2.5 G(he license is a)
-2.5 E -.25(va)-.2 G(ilable at :).25 E/F2 10/Times-Bold@0 SF(http://www)
108 144 Q(.gnu.or)-.7 E(g/copyleft/lesser)-.1 E(.html)-1 E F1 -.548(AU)
72 172.8 S(THOR).548 E F0(De)108 184.8 Q -.15(ve)-.25 G(loped by Da).15
E(vide Libenzi <)-.2 E F2(da)2.5 E(videl@xmailser)-.25 E -.1(ve)-.1 G -1
(r.).1 G(or)1 E(g)-.1 E F0(>.)2.5 E F1 -1.04 -1.588(AV A)72 213.6 T
(ILABILITY)1.588 E F0(The latest v)108 225.6 Q(ersion of)-.15 E F2(SMDB)
2.5 E F0(can be found at :)2.5 E F2(http://www)108 249.6 Q(.xmailser)-.7
E -.1(ve)-.1 G -1(r.).1 G(or)1 E(g/smdb-lib)-.1 E(.html)-.4 E F1 -.11
(BU)72 278.4 S(GS).11 E F0(There are no kno)108 290.4 Q(wn b)-.25 E
(ugs. Bug reports and comments to Da)-.2 E(vide Libenzi <)-.2 E F2(da)
2.5 E(videl@xmailser)-.25 E -.1(ve)-.1 G -1(r.).1 G(or)1 E(g)-.1 E F0
(>.)2.5 E 203.59(GNU 0.4)72 768 R(20)217.75 E 0 Cg EP
%%Trailer
end
%%EOF
